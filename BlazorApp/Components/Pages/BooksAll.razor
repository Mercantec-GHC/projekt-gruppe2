@page "/books"
@using BlazorApp.Models
@using BlazorApp.Service
@inject DBService DbService
@inject IJSRuntime JSRunTime

<PageTitle>All Books</PageTitle>

<div class="container-fluid">

	<div class="card card-opacity">
		<div class="card-body ">
			<div class="row px-3">

				<div class="col-12 col-md-3 my-2">
					<div class="mx-sm-4">
						<CategoryFilterComponent Categories="_categories"
												 SelectedCategories="_selectedCategories"
												 OnCategorySelected="OnCategoryClick" />

						<GenreFilterComponent Genres="_genres"
											  SelectedGenres="_selectedGenres"
											  OnGenreSelected="OnGenreClick" />
					</div>
				</div>
				<div class="col-12 col-md-9">
					<div class="mx-sm-4">
						<SearchComponent SearchBookCallback="OnSearch"></SearchComponent>
						<div class="py-3 ">
							@if (isLoading)
							{
								<div class="text-center">
									<p>Loading books...</p>
								</div>
							}
							else
							{
								<div class="row row-cols-1 row-cols-sm-2 row-cols-xl-3 g-3">
									@if (_filteredBooks != null && _filteredBooks.Any())
									{
										@foreach (Book book in _filteredBooks)
										{
											<BookComponent book="book"></BookComponent>
										}
									}
									else
									{
										<p style="margin-left: 20px;">No books found based on your filters...</p>
									}
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="scroll-top-container">
	<button type="button" id="scroll_top"
			@onclick=OnScrollClicked
			class="btn btn-primary text-nowrap d-none">
		<i class="bi-arrow-up-square-fill"></i> Back to top
	</button>
</div>

@code {
	[Inject]
	private NavigationManager Navigation { get; set; }

	private ModelList<Category> _categories = new ModelList<Category>();
	private ModelList<Book> _books = new ModelList<Book>();
	private ModelList<Genre> _genres = new ModelList<Genre>();

	private ModelList<Book> _filteredBooks = new ModelList<Book>();
	private HashSet<int> _selectedCategories = new HashSet<int>();
	private HashSet<int> _selectedGenres = new HashSet<int>();
	private bool isLoading = false;


	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		_books = await Book.QueryAll();
		_categories = await Category.QueryAll();
		_genres = await Genre.QueryAll();
		isLoading = false;
		await ApplyFilters();
	}

	protected override async void OnAfterRender(bool firstRender)
	{
		try
		{
			var jsModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/books.js");
			await jsModule.InvokeVoidAsync("AttachScrollEvents");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error attaching JS libraries: {ex.Message}");
		}
	}

	private async void OnScrollClicked()
	{
		var jsModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/books.js");
		await jsModule.InvokeVoidAsync("ScrollToTop");
	}

	private async Task OnCategoryClick(Category category)
	{
		if (_selectedCategories.Contains(category.Id))
		{
			_selectedCategories.Remove(category.Id);
		}
		else
		{
			_selectedCategories.Add(category.Id);
		}
		await ApplyFilters();
	}

	private async Task OnGenreClick(Genre genre)
	{
		if (_selectedGenres.Contains(genre.Id))
		{
			_selectedGenres.Remove(genre.Id);
		}
		else
		{
			_selectedGenres.Add(genre.Id);
		}
		await ApplyFilters();
	}

	private async Task OnSearch(string searchInput)
	{
		var searchResults = _books.AsQueryable();

		if (!string.IsNullOrWhiteSpace(searchInput))
		{
			searchResults = searchResults
				.Where(book => book.Title.Contains(searchInput, StringComparison.OrdinalIgnoreCase)
							|| book.Author.Contains(searchInput, StringComparison.OrdinalIgnoreCase));
		}
		_filteredBooks.Clear();
		_filteredBooks.AddRange(searchResults.ToList());

		StateHasChanged();
	}

	private async Task ApplyFilters()
	{
		isLoading = true;

		var filteredBooksList = _books.AsQueryable();

		if (_selectedCategories.Any())
		{
			filteredBooksList = filteredBooksList
				.Where(book => book.CategoryId != null && _selectedCategories.Contains(book.CategoryId));
		}

		if (_selectedGenres.Any())
		{
			filteredBooksList = filteredBooksList
				.Where(book => book.GenreId != null && _selectedGenres.Contains(int.Parse(book.GenreId)));
		}

		_filteredBooks.Clear();
		_filteredBooks.AddRange(filteredBooksList.ToList());

		isLoading = false;
		StateHasChanged();
	}

	private void NavigateToUrl()
	{
		Navigation.NavigateTo("/books", true);
	}
}