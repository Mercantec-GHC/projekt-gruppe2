@page "/books"
@using BlazorApp.Models
@using BlazorApp.Service
@inject DBService DbService

<PageTitle>All Books</PageTitle>

<div class="container">
	<div class="flex flex-nowrap">
		<div class="position-sticky position-fixed ">
			<SearchComponent SearchBookCallback="OnSearch"></SearchComponent>
		</div>
	</div>
	
	<div class="row">
		<div class="col-12 col-md-2 p-3">
			<div class=" ">
			<CategoryFilterComponent Categories="_categories"
									 SelectedCategories="_selectedCategories"
									 OnCategorySelected="OnCategoryClick" />

			<GenreFilterComponent Genres="_genres"
								  SelectedGenres="_selectedGenres"
								  OnGenreSelected="OnGenreClick" />
		</div>
		</div>
		
		<main class="col-12 col-md-9" style="margin-top: 15px">
			
			<div class="py-3 bg-body-tertiary">
				@if (isLoading)
				{
					<div class="text-center">
						<p>Loading books...</p>
					</div>
				}
				else
				{
					<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
						@if (_filteredBooks != null && _filteredBooks.Any())
						{
							@foreach (Book book in _filteredBooks)
							{
								<BookComponent book="book"></BookComponent>
							}
						}
						else
						{
							<p style="margin-left: 20px;">No books found based on your filters...</p>
						}
					</div>
				}
			</div>
		</main>
		@* to be implemented! *@
		<div class="container">
			<p class="float-end mb-1">
				<a href="#">Back to top</a>
			</p>
		</div>
	</div>
</div>

@code {

	private ModelList<Category> _categories = new ModelList<Category>();
	private ModelList<Book> _books = new ModelList<Book>();
	private ModelList<Genre> _genres = new ModelList<Genre>();

	private ModelList<Book> _filteredBooks = new ModelList<Book>();
	private HashSet<int> _selectedCategories = new HashSet<int>();
	private HashSet<int> _selectedGenres = new HashSet<int>();
	private bool isLoading = false;
	// 
	// [Inject]
	// private NavigationManager Navigation { get; set; }

	// private void NavigateToUrl()
	// {
	// 	Navigation.NavigateTo("https://localhost:7130/books", true);
	// }

	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		_books = await Book.QueryAll();
		_categories = await Category.QueryAll();
		_genres = await Genre.QueryAll();
		isLoading = false;
		await ApplyFilters();
	}

	private async Task OnCategoryClick(Category category)
	{
		if (_selectedCategories.Contains(category.Id))
		{
			_selectedCategories.Remove(category.Id);
		}
		else
		{
			_selectedCategories.Add(category.Id);
		}
		await ApplyFilters();
	}

	private async Task OnGenreClick(Genre genre)
	{
		if (_selectedGenres.Contains(genre.Id))
		{
			_selectedGenres.Remove(genre.Id);
		}
		else
		{
			_selectedGenres.Add(genre.Id);
		}
		await ApplyFilters();
	}

	private async Task OnSearch(string searchInput)
	{
		var searchResults = _books.AsQueryable();

		if (!string.IsNullOrWhiteSpace(searchInput))
		{
			searchResults = searchResults
				.Where(book => book.Title.Contains(searchInput, StringComparison.OrdinalIgnoreCase)
							|| book.Author.Contains(searchInput, StringComparison.OrdinalIgnoreCase));
		}
		_filteredBooks.Clear();
		_filteredBooks.AddRange(searchResults.ToList());

		StateHasChanged();
	}

	private async Task ApplyFilters()
	{
		isLoading = true;

		var filteredBooksList = _books.AsQueryable();

		if (_selectedCategories.Any())
		{
			filteredBooksList = filteredBooksList
				.Where(book => book.CategoryId != null && _selectedCategories.Contains(book.CategoryId));
		}

		if (_selectedGenres.Any())
		{
			filteredBooksList = filteredBooksList
				.Where(book => book.GenreId != null && _selectedGenres.Contains(int.Parse(book.GenreId)));
		}

		_filteredBooks.Clear();
		_filteredBooks.AddRange(filteredBooksList.ToList());

		isLoading = false;
		StateHasChanged();
	}
}