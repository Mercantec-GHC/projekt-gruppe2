@page "/books"
@using BlazorApp.Models
@using BlazorApp.Service
@inject DBService DbService

<PageTitle>All Books</PageTitle>

<h3>All Books</h3>
@*<p>@connectionStatus</p> *@

<div class="search-bar">
	<SearchComponent SearchFilter="@searchFilter" SearchBookCallback="HandleSearch"></SearchComponent>
</div>
<div class="main-container">

	<div class="categories">
		<h3>Categories</h3>

		<div class="category-table-container">
			<table class="table">
				<tbody>
					@foreach (var category in categories)
					{
						<tr @onclick="() => OnCategoryClick(category)" class="@(selectedCategory == category ? "selected-category" : "")">
							<td>@category.Name</td>
						</tr>
					}
				</tbody>
			</table>
		</div>

	</div>

	<div class="mt-auto">
		@if (selectedCategory == null)
		{
			<BookComponent books="books"></BookComponent>
		}
		else
		{
			<div>


				<h2>All books in category @selectedCategory.Name</h2>

				@if (filteredBooks != null && filteredBooks.Any())
				{
					@foreach (var book in filteredBooks)
					{
						<BookComponent books="filteredBooks"></BookComponent>
					}
				}
				else
				{
					<p>No books in this category</p>
				}

			</div>
		}


	</div>
</div>


@code {
	private ModelList<Categories> categories = new ModelList<Categories>();
	private ModelList<Book> books = new ModelList<Book>();
	private ModelList<Book> filteredBooks = new ModelList<Book>();
	private string connectionStatus;
	private string searchFilter = "";

	private void HandleSearch(string searchFilter)
	{
		this.searchFilter = searchFilter;
	}

	protected override async Task OnInitializedAsync()
	{
		books = await Book.QueryAll();
		categories = await Categories.QueryAll();
	}
	private Categories selectedCategory;

	private async Task OnCategoryClick(Categories category)
	{
		selectedCategory = category;
		try
		{
			if (selectedCategory != null)
			{
				var booksForCategory = await selectedCategory.GetBooksAsync();
				filteredBooks = booksForCategory;
			}
			else
			{
				filteredBooks = new ModelList<Book>();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching books: {ex.Message}");
			filteredBooks = new ModelList<Book>();
		}
	}

}
<style>
	.main-container {
		display: flex;
		flex-direction: row;
		gap: 20px;
	}

	.search-bar {
		display: flex;
		justify-content: center;
		margin-bottom: 20px;
	}

	.categories {
		display: flex;
		flex-direction: column;
		gap: 10px;
	}

	.category-table-container {
		overflow-x: auto;
	}

	table {
		width: 100%;
		border-collapse: collapse;
	}

	th, td {
		padding: 8px;
		text-align: left;
		border: 1px solid #ddd;
	}

	th {
		background-color: #f4f4f4;
	}
</style>
