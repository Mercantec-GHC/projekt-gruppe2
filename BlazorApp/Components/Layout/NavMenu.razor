@using System.Security.Claims;

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRunTime

<nav class="navbar navbar-dark fixed-top navbar-expand-sm bg-dark border-bottom shadow">
    <div class="container-fluid container-xxl">
        <a class="navbar-brand" href="">
            <i class="bi bi-book"></i>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain" aria-controls="navbarMain" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarMain">
            <div class="navbar-nav me-auto">
                <div class="nav-item py-2 py-sm-1 col-12 col-sm-auto">
                    <hr class="d-sm-none my-0 text-white-50">
                </div>
                <div class="nav-item">
                    <NavLink class="nav-link fw-bold" href="books">
                        <span class="bi bi-book-half me-1" aria-hidden="true"></span>Books
                    </NavLink>
                </div>
                <div class="nav-item">
                    <NavLink class="nav-link fw-bold" href="test">
                        <span class="bi bi-book-half me-1" aria-hidden="true"></span>Test
                    </NavLink>
                </div>
            </div>
            <div class="navbar-nav">

                <NavbarLine />

                <AuthorizeView>
                    <Authorized>

                        <NavLink class="nav-item nav-link" href="cart">
                            <i class="bi bi-cart-fill d-none d-sm-inline-block"></i>
                            @* <div style="position: relative; width: 0; height: 0">
                                <div style="position: absolute; left: 24px; top: -32px">
                                    <span class="badge bg-danger notification-counter d-none d-sm-inline-block">7</span>
                                </div>
                            </div> *@
                            <span class="d-inline-block d-sm-none fw-bold">Cart</span>
                            @* <span class="d-inline-block d-sm-none">(7)</span> *@
                        </NavLink>

                        <MessageMenu />

                    </Authorized>
                </AuthorizeView>

                <LanguageMenu/>

                <ThemeMenu />

                @if (!IsLoginPage())
                {
                    <NavbarLine />
                }
                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item dropdown">
                            <button class="nav-link navbar-img" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <img id="userAvatar" src="images/no_avatar.png" class="avatar-img rounded-circle shadow-4" style="background-color: white;">
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><NavLink class="dropdown-item" href="@GetUserPage(context.User)" Match="NavLinkMatch.All">Account</NavLink></li>
                                <li><NavLink class="dropdown-item" href="orders" Match="NavLinkMatch.All">Orders</NavLink></li>
                                <li><NavLink class="dropdown-item" href="account" Match="NavLinkMatch.All">Settings</NavLink></li>
                                @if (IsUserAdmin(context.User))
                                {
                                    <li><hr class="dropdown-divider"></li>
                                    <li><NavLink class="dropdown-item" href="account/administration" Match="NavLinkMatch.All">Admin</NavLink></li>
                                }
                                <li><hr class="dropdown-divider"></li>
                                <li><button @onclick="handleLogout" class="dropdown-item">Logout</button></li>
                            </ul>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <!-- Button trigger login modal -->
                        @if (!IsLoginPage())
                        {
                            <div class="nav-item">
                                <button type="button" class="nav-link fw-bold d-inline-block pe-0" data-bs-toggle="modal" data-bs-target="#loginModal">
                                    Login
                                </button>
                                <span class="navbar-text fw-bold d-none d-sm-inline-block">/</span>
                                <NavLink class="nav-link fw-bold d-block d-sm-inline-block ps-0" href="register" Match="NavLinkMatch.All">Register</NavLink>
                            </div>
                        }
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</nav>

@if (!IsLoginPage())
{
    <AuthorizeView>
        <NotAuthorized>
            <!-- Login Modal -->
            <div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="loginModalLabel">Login</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <LoginComponent />
                        </div>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    protected override async void OnAfterRender(bool firstRender)
    {
        var navModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/navmenu.js");
        await navModule.InvokeVoidAsync("attachHandlers");
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // rerender component
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // add the event to the NavigationManager
        NavigationManager.LocationChanged += HandleLocationChanged;

    }

    public void Dispose()
    {
        // remove the event from the NavigationManager
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private string GetCurrentUrl()
    {
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        return uriBuilder.Path;
    }

    private bool IsLoginPage()
    {
        return GetCurrentUrl() == "/login";
    }

    private async void handleLogout()
    {
        var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
        await authModule.InvokeVoidAsync("SignOut", "/");
    }

    private string GetUserPage(ClaimsPrincipal user)
    {
        var username = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value;
        return $"u/{username}";
    }

    private bool IsUserAdmin(ClaimsPrincipal user)
    {
        var role = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role).Value;
        return role == "admin";
    }
}