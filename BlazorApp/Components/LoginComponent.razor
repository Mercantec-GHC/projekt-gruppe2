@inject NavigationManager NavigationManager
@inject IJSRuntime JSRunTime

<EditForm FormName="Login" Model="this" OnSubmit="HandleLogin" id="loginForm">
    
    @if (UseCard)
    {
        <div class="card card-opacity">
            <div class="card-body">
                <div class="card shadow">
                    <h1 class="card-header">Login</h1>
                    <div class="card-body pb-0">
                        <div class="mb-3">
                            <label for="loginInputEmail" class="form-label">Email address</label>
                            <input type="email" class="form-control" id="loginInputEmail" required />
                        </div>
                        <div class="mb-3">
                            <label for="loginInputPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="loginInputPassword" required />
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="loginInputRemember">
                            <label class="form-check-label" for="loginInputRemember">Remember me</label>
                        </div>
                        <div class="mb-3" style="display:none;" id="loginFlashMessage">
                            <p class="text-danger">Incorrect Email or Password!</p>
                        </div>
                    </div>
                    <div class="card-footer text-muted py-3">
                        <button type="submit" class="btn btn-primary" style="width:120px;">
                            <span id="loginSpinner" class="spinner-border spinner-border-sm d-none" aria-hidden="true"></span>
                            <span id="loginText" role="status">Log in</span>
                        </button>
                        <a class="btn btn-link d-inline-block" href="register">Register</a>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="modal-body pb-0">
            <div class="mb-3">
                <label for="loginInputEmail" class="form-label">Email address</label>
                <input type="email" class="form-control" id="loginInputEmail" required />
            </div>
            <div class="mb-3">
                <label for="loginInputPassword" class="form-label">Password</label>
                <input type="password" class="form-control" id="loginInputPassword" required />
            </div>
            <div class="mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="loginInputRemember">
                <label class="form-check-label" for="loginInputRemember">Remember me</label>
            </div>
            <div class="mb-3" style="display:none;" id="loginFlashMessage">
                <p class="text-danger">Incorrect Email or Password!</p>
            </div>
        </div>
        <div class="modal-footer justify-content-start">
            <button type="submit" class="btn btn-primary" style="width:120px;">
                <span id="loginSpinner" class="spinner-border spinner-border-sm d-none" aria-hidden="true"></span>
                <span id="loginText" role="status">Log in</span>
            </button>
            <button type="button" class="btn btn-link d-inline-block" @onclick="RegisterClicked">Register</button>
        </div>
    }

</EditForm>

@code {
    [Parameter]
    public bool UseCard { get; set; } = false;

    private async void HandleLogin()
    {
        var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
        string email = await authModule.InvokeAsync<string>("GetInputValue", "loginInputEmail");
        string password = await authModule.InvokeAsync<string>("GetInputValue", "loginInputPassword");
        bool remember = await authModule.InvokeAsync<bool>("IsChecked", "loginInputRemember");

        await authModule.InvokeVoidAsync("SignIn", email, password, remember, GetReturnUrl());
    }

    private async void RegisterClicked()
    {
        NavigationManager.NavigateTo("register", true);
    }

    private string GetReturnUrl()
    {
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q["returnUrl"] ?? uriBuilder.Path;
        // string returnUrl = q["returnUrl"];
        // return (returnUrl != null ? $"/{returnUrl}" : uriBuilder.Path);
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}