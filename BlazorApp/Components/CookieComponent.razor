@inject IJSRuntime JSRunTime


@* loads the cookie accept box for useres that do not have a cookie *@
@if (!hasCookie)
{
	<div class="fixed-bottom py-3 bg-dark border-top text-light">
		<div class="container">
			<p>This website uses cookies to help you have a better browsing experience on the website.</p>
			<button class="button" @onclick=AcceptClicked>Accept</button>
			<button class="button" @onclick=DeclinedClicked>Decline</button>
		</div>
	</div>
}

@code{
	// set to true to not show cookie box before cookie is found
	private bool hasCookie = true;

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				var cookieModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/cookie.js");
				string cookie = await cookieModule.InvokeAsync<string>("getCookie", "cookies_accepted");
				hasCookie = cookie.Length > 0;
				StateHasChanged();
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error attaching JS libraries: {ex.Message}");
			}
		}
	}

	private async Task AcceptClicked()
	{
		await CookiesAccepted(true);
	}

	private async Task DeclinedClicked()
	{
		await CookiesAccepted(false);
	}

	private async Task CookiesAccepted(bool accepted)
	{
		try
		{
			var cookieModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/cookie.js");
			await cookieModule.InvokeVoidAsync("setCookie", "cookies_accepted", accepted, 400);
			hasCookie = true;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error attaching JS libraries: {ex.Message}");
		}
	}
}